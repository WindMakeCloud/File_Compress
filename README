
项目名称：文件的压缩解压缩
项目简介：对文件进行压缩后加密处理；
		  对文件进行解密后解压缩，还原原文件
开发时间：Start 2019-7-16
		  End   2019-7-18
开发环境：Linux,vim,C,gcc,gdb

技术要求：文件操作
		  桶排序思想统计字符种类和频率
		  小堆思想构建哈夫曼编码树    （未实现）
		  递归思想构建哈夫曼编码
		  位运算思想进行压缩
		  异或运算进行加密（对称加密）（未实现）

文件：    main.cpp     - 主程序源文件
		  Compress.h   - 头文件，包含宏定义，函数声明
		  Compress.cpp - 源文件，包含函数实现
	

版本：    File_Compress_V1.0
更新时间：2019-7-18 20:25
实现功能：1.文件压缩，采用Huffman算法编码
		  2.文件解压缩
		  
		  Huffman编码算法：
				对于字符出现频率已知的任一字符集，都可采用如下算法构造其对应的最优带权编码树：
				首先，对应于字符集中的每一个字符，分别建立一棵单个节点的树，其权重取作该字符的
			频率，这些树构成一个森林；
				然后，从森林中选出权重最小的两棵树，创建一个新节点，并分别以这两棵树作为其左、
			右子树，如此将它们合并为一棵更高的树，其权重取作二者权重之和。实际上，此后
			可以将合并后的新树等效地视作一个字符，称作超字符。
				这一选取、合并的过程反复进行，每经过一轮迭代，森林中的树就减少一棵。最终森林仅
			包含一棵树时，它就是一棵最优带权编码树，构造过程随即完成。
		  
程序步骤：压缩：
		  1.统计字符频率        -- 桶排序思想
		  2.建立编码树节点森林  -- 将字符频率依次复制到树节点
		  3.建立Huffman编码树   -- 每一轮循环在节点数组种寻找两个权值最小的节点进行合并
		  4.将字符频率、源文件长度写入压缩文件  
		  5.根据编码树对源文件的每1个字节依此进行编码，写入压缩文件 -- 位运算思想进行编码压缩
			
		  解压缩：
		  1.根据字符频率重建Huffman编码树
		  2.读取文件长度，作为文件结束标记
		  3.每8位一个处理单元，从编码树根节点开始遍历进行解码
		  
效果：
		  英文文本文件的压缩效果良好，达到60%左右；中文文本文件压缩率为70%左右。
		  图片文件，PDF文件和word文件几乎不压缩。
	

